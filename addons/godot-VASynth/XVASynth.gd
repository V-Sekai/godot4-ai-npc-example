extends Node
## This is a script that allows the running of a local XVASynth server via a .bat file and then queries it for TTS
## This is windows-only and requires that you have XVASynth installed on your computer and have edited the .bat file to point to your install location
## This is only compatible with xVAPitch models (v3 of XVASynth) as of right now because most of the variables related to those models are hard-coded in the script.
signal xvasynth_model_loaded
signal xvasynth_stored_voicefile(file_path)
signal xvasynth_voice_sample_played()
@export var autoload_model : bool = true
@export var model_path : String = "D:/DExtraSteamGames/steamapps/common/xVASynth/resources/app/models/skyrim/sk_femalenord": set=set_model, get=get_model
@onready var userdirectory : String = OS.get_user_data_dir()
@onready var executabledirectory : String = OS.get_executable_path().get_base_dir()
var model_ready : bool = false
var xvasynthplayer : AudioStreamPlayer
var xvasynthaudiostream : AudioStreamWAV
var outfile : String = ""
# To control output speed of sound
var pace : float = 1.00: set=set_pace
# To allow for queuing of prompts and audio files
var stored_prompts : Array = []
var stored_audio : Array = []
var ok_to_synthesize : bool = true
var headers = PackedStringArray([])
var http_request : HTTPRequest 
# To allow for automatic generation of . bat file to initiate XVASynth
var batfilepid = null
var base_emb : String = ""
	
# Set up an audio player to play audio from xvasynth
func _ready():
	xvasynthplayer = AudioStreamPlayer.new()
	add_child(xvasynthplayer)
	xvasynthaudiostream = AudioStreamWAV.new()
	xvasynthplayer.stream = xvasynthaudiostream
	xvasynthaudiostream.mix_rate = 22050
	xvasynthaudiostream.stereo = false
	xvasynthaudiostream.format = AudioStreamWAV.FORMAT_16_BITS
	xvasynthplayer.connect("finished", Callable(self, "_on_xvasynth_player_finished"))
	http_request = HTTPRequest.new()
	add_child(http_request)
	http_request.connect("request_completed", Callable(self, "_on_XVASynth_synthesize_request_completed"))
	
	
# Initiate the xvasynth API server using a bat file, note this must be called inside of a thread function otherwise it will lock up Godot
func initiate_XVASynth():
	print("Initiating XVASynth")
	
	# Now create/run server bat file
	var output : Array = []
	var arguments = PackedStringArray([])
	var batfiledirectory : String = ""
	var batfilepath : String = ""
	# If in editor, use user directory for batfile
	if OS.has_feature("editor"):
		batfiledirectory = OS.get_user_data_dir()
	# Otherwise, use executable directory
	else:
		batfiledirectory = OS.get_executable_path().get_base_dir()
	batfilepath = batfiledirectory.path_join("xvasynthserverstartauto.bat")
	# If have already set up auto XVASynth server bat file, then run it
	if FileAccess.file_exists(batfilepath):
		batfilepid = OS.execute(batfilepath, arguments, output, false, false)
	# Otherwise, create auto XVASynth server bat file and run it
	else:
		var batfile = FileAccess.open(batfilepath, FileAccess.WRITE)
		batfile.store_line("@echo OFF")
		batfile.store_line(model_path.get_slice("/", 0))
		var path_after_drive = model_path.substr(3, -1)
		var path_to_XVASynth = path_after_drive.get_slice("/resources", 0)
		batfile.store_line("CD\\"+path_to_XVASynth)
		batfile.store_line("START "+"resources/app/cpython_cpu/server.exe")
		batfile.close()
		batfilepid = OS.execute(batfilepath, arguments, output, false, false)	

	
# Load the voice file selected by the user to xvasynth
func load_XVASynth_model():
	var model_http_request : HTTPRequest = HTTPRequest.new()
	add_child(model_http_request)
	model_http_request.connect("request_completed", Callable(self, "_on_XVASynth_model_request_completed"))
	var body = JSON.stringify({
		"outputs": null, "model": model_path, "modelType": "xVAPitch", "version": "3.0", "base_lang": "en", "pluginsContext": "{}"})
	var headers = PackedStringArray([])
	model_http_request.request("http://127.0.0.1:8008/loadModel", headers, HTTPClient.METHOD_POST, body)
	

# Handle response from xvasynth server to load model
func _on_XVASynth_model_request_completed(result, responseCode, headers, body):
	if responseCode != 200:
		print("There was an error with XVASynth's API's response, response code:" + str(responseCode))
		print(result)
		print(headers)
		print(body.get_string_from_utf8())
		return
	
	print("VASynth model initialized")
	model_ready = true
	emit_signal("xvasynth_model_loaded")


# Queue prompt to generate speech audio file from text prompt using vasynth server API
func XVASynth_synthesize(prompt):
	# If prompt is long, separate it into seperate prompts for the synthesize queue
	if prompt.length() > 250:
		var dialogue_sections = prompt.split(". ")
		for each_sentence in dialogue_sections:
			if each_sentence == "" or each_sentence == " ":
				continue
			else:
				stored_prompts.append(each_sentence)
	else:
		stored_prompts.append(prompt)
	
	process_XVASynth_prompt_queue()


# Generate audio file from next queued prompt
func XVASynth_synthesize_queued_prompt(prompt : String):
	var outfile_prefix = "vasynth"
	outfile_prefix+=str(stored_audio.size())
	if OS.has_feature("editor"):
		outfile = userdirectory.path_join(outfile_prefix + ".wav")
	elif OS.has_feature("android"):
		print("VASynth will not work on an android build")
		outfile = executabledirectory.path_join(outfile_prefix+".wav")
	else:
		outfile = executabledirectory.path_join(outfile_prefix+".wav")
	
	#base_emb = "-0.03307892209473534,-0.015160089002586216,0.039415451963713655,0.032952740429217864,-0.044074173689262,-0.006043928419092768,-0.06725671260377669,-0.009814870905288273,-0.008816312106650445,0.003235749964354164,0.03907232733195724,0.003917719463796318,-0.01075526411239769,0.026085414804400957,0.009070963911789957,-0.05666504650645743,0.03198817363753707,-0.042866557068094564,0.008078116153330622,-0.000338142863392509,0.05229446164601066,0.0021166621826328117,0.0011195960125286678,0.023775622334265348,0.05189036324573464,0.009040913617830815,0.013604793648914518,-0.03505871950606021,-0.015432498442270312,0.009225527665844271,0.02827533944283485,0.03392842202379355,0.01559929457595398,0.019807132309639014,-0.02147210708331229,-0.020361310729504537,0.04896945973408284,0.0322007894551079,-0.013364980704762136,-0.001280538592356742,-0.002705242269499971,0.0035376434108197784,-0.014764371463307068,0.005203917986763603,0.004079518099451969,0.00439433973341667,-0.022027367286486917,0.05005762218193055,0.03333344954471528,-0.05740924980888517,0.005805069840048434,0.05333801435743769,0.0034363366229134026,-0.00847641299131742,0.012635346763422133,-0.03124157874765069,-0.008895601824168183,0.02233594152469684,-0.011314495379091542,-0.02713391591318655,-0.02517812098112615,-0.00820441447322677,-0.03617588002187938,0.03576701662711806,0.030696675699001835,0.006407397328132975,0.00663942902779169,-0.0030261014080211666,-0.023157720364507212,0.07340503388376053,0.01809370950981689,-0.0012494390289524526,-0.009310148666820013,-0.005415410921311431,-0.017802072996907396,-0.0025381586768940152,0.030822412201372593,0.014964367461501427,-0.010525615287796455,0.0018754413268083079,0.06967987419784974,0.016725622535283445,0.021591964963284728,0.017277015072994527,0.05297077868338326,0.034738439099689634,-0.02164644518205227,0.006952825299020547,-0.06053746563804587,0.03325541930370551,-0.013492800763606707,0.0008214184578897617,-0.06609551388046553,0.007380151829306458,-0.03255290031325937,-0.008282088461128637,0.012344342311484343,-0.008141503895760216,-0.07628450919678174,0.009585994788841014,-0.0076295479902485286,0.03655769886734851,-0.05182248197841238,-0.05034784346690539,-0.02838163015106734,-0.05318559482125195,-0.011699565708300368,-0.009329770821799982,0.0033108199436610785,0.0017081332418677434,0.016346500191961856,0.034395489265674956,0.014464663857962414,-0.0200802040997026,0.012252312179213657,-0.03009241177079556,-0.03521347897533976,0.01839369987415734,-0.02168532145819499,-0.022284803776078364,-0.12898622075026142,0.01321062306450475,-0.006772517546676549,-0.03910487107051293,-0.004528805234864622,-0.01457593491506282,0.02452115115592507,0.06370224736080936,0.024732505835115867,0.025478272365634325,0.000921686720124785,-0.033024532447054174,0.06201668341739851,0.005522902569520451,-0.12745161369120894,0.009316297663814947,0.06232364772096555,0.02945009336894417,0.004228447950353998,0.04123710199609011,-0.011270546843729577,0.010016965792593195,-0.02504636900820829,-0.00032857760971153433,-0.009672567542173898,0.011752961704722436,-0.03231187175571615,-0.006578745816572952,0.0029691923735248485,-0.04074593107769577,0.024671609074749398,-0.01963585183312997,-0.009258500230261464,0.08126490008168652,-0.014258187380551336,0.03853859402684448,0.005921082707947077,-0.01642346626781588,-0.01230290608291015,0.0038818393122625446,0.05607175288510305,0.02572338809003217,0.005457123465688385,-0.05495336112674003,0.038376170916614175,0.003001968420937722,0.10840184470664745,-0.0037046790124226855,-0.0022217530403964804,-0.006793678161506183,0.0028805820298884992,-0.04685125267083817,0.0011256537696239279,0.012828427327778589,0.00275961740703041,0.029644089904352678,0.006087528416309878,0.035048696569060456,0.004343532639680478,0.02124906678068115,0.020402464529129628,-0.00016006555463964848,0.009255136704183802,0.04545955280376223,0.023057146477313096,0.029737737572444713,0.05623629932532796,-0.01835832995943195,0.03186163332348115,0.0060685200419909515,0.011428441037742657,-0.003296475531842977,0.03777318396767391,-0.013285280002670565,-0.012205480223473446,0.012582675253844027,0.008249268890875305,-0.02335826377705663,0.014372374385568258,0.035929150167631235,-0.009201232413569217,-0.010809868634628107,0.004934615949170187,-0.005316648997020862,-0.040850919238811206,-0.010361093855597518,0.01617226826122439,0.006494675968276176,0.009240179467431126,-0.028542335090979767,0.02625051234828669,0.02204200150551183,0.1497093755577769,0.020424292706389405,0.015948597031714702,-0.02520731505635615,-0.009512176037660365,-0.022690526267843292,0.0699823120245536,-0.0152829447592879,-0.009434642173084843,-0.00365067626901513,-0.017382199642703766,-0.0038107798238691576,0.023252023850282313,-0.0070243090429816845,-0.028644530289949493,0.02362475180429967,0.00556959026883126,0.04355450178809407,-0.01239883552812541,0.0073390389027812655,0.02077648118053399,0.01910159797418566,0.0064293353008787685,-0.018550184802462292,-0.03366657577539499,0.007272322158705636,0.06155654641447527,-0.0211544208747493,-0.02048727981976035,0.0004684819668399759,0.012135142243820823,-0.029735759113753157,-0.006399952146868223,0.11430081727622927,-0.0027433030407796356,0.00757982331853109,-0.007108710718575904,-0.009560516856583625,-0.01826538828402666,-0.02425951762424434,-0.029287731175615006,-0.03865434970153116,0.0139905136959803,-0.0001386059135579775,0.0015401155246296209,-0.011497994208575535,0.03562920628651099,0.06364545972433559,0.02386023828917004,0.030291312664396906,-0.04057455833383322,0.028833588019092825,0.007227747985363798,-0.0028655488663686915,-0.0013140864376620376,0.023257152750098854,0.02467772593393199,0.04232431730086438,0.013795499682754068,0.04377836482389939,0.03559834815552389,-0.0025209267661292357,0.030211414802026874,-0.02179578229825153,0.06070469606214335,0.035242806182302217,-0.0033558088544621287,0.012005267306279242,-0.018847436418055225,-0.00929496389469308,-0.062398902553417374,0.015152802044476374,0.015100500718961773,-0.003589092638799869,-0.03639719801442616,-0.00637436481292327,-0.002992068496581354,-0.027770147422726137,0.04276305179808111,-0.0034123949784957927,0.0019137236388168928,0.07166045006438967,0.04624810255356743,0.013641760642568553,-0.03682149623167891,-0.011115607577071432,-0.030575579189822982,0.020482491012444367,0.22789221693909611,-0.014994528247998308,0.034101149618861466,0.013446247894864566,-0.04150905011850134,-0.010756821718015536,0.00033743017290625713,0.01312963149421109,-0.010574364695347421,-0.01822724358633966,-0.0024657136696035423,-0.04486351609145,-0.032733171527410225,0.0027817130697929612,0.21616466761192427,-0.02725918707199814,-0.027899641123556043,-0.061389628030359994,-0.07805895805250088,-0.02746772997722694,-0.032628295089099965,-0.020254286932451626,-0.010134861726073382,-0.030649919823700418,-0.026507475545355468,0.020128968114383673,0.0005200041141634006,0.03522579194967001,0.01866658291314749,-0.02799593627512146,0.06594317302050148,-0.0060662336416150466,0.03963428295746696,0.04283142730209619,0.01861865330545561,0.0314344543588721,-0.0012867953759880812,-0.040140940806382766,-0.027468802323123903,-0.012073386602644853,-0.016967025288968818,-0.051028917403714874,-0.018627425675493504,0.05353971666011254,0.07453301736038334,0.011258720584813245,-0.006459508558507916,0.024835164674297167,-0.03290782911994301,-0.003582758668909546,0.0401622168289331,-0.009861691377723943,0.03819595791468023,-0.012579089947530096,0.005424137085407049,-0.010952602893769064,-0.047423819738231315,-0.000875944661091926,-0.02466934190313147,0.004421697884987293,-0.01745919233576175,-0.008748816907370307,0.050262397367596426,0.03912558281254544,0.030450599837702985,0.017547238928978647,-0.07081283274907443,-0.01823520603462622,0.016928381659807066,-0.015656872558308617,0.010120502678240476,-0.06369011950494573,0.06417972970143002,-0.05683209762182146,0.009266423285642256,-0.016043454119018318,-0.001190337067264527,-0.055124247899533574,0.017014343386363522,-0.0060531965753995495,0.008647544412167781,0.020823819682880072,-0.0005160258521041145,-0.015112479695999695,0.010280819099968209,-0.023583658404033918,0.00864772676000752,0.06255062234345345,0.02190267368162444,-0.011108275597303596,0.006484202640167153,0.026029998933919267,-0.009810809579061937,0.031123081847432912,-0.02575601976310859,0.012656896325020973,0.017675029089047636,0.011246959118125234,0.026061603266370924,-0.024013147871097047,0.012918916933620996,0.012569243978169171,-0.07434236601693554,-0.008897215720892995,0.03973772629724068,-0.02189395777647924,0.03786983230535367,0.009568544765073473,-0.009158845937958538,-0.001932510069989496,0.06286242271139215,-0.0322154373401917,0.026313978386811675,0.02466612497725955,0.035464878304737456,0.0047990033350441275,0.002672597780338465,0.009337370801030177,0.011553562070254552,-0.011119683295468114,0.015435442627719322,-0.022297230246626425,0.02062546189604588,-0.03229567772920583,-0.02074908778645592,0.0021957665298219234,-0.01283536966888125,-0.002906891848363203,0.038023188702426755,-0.009315447760068775,0.001370606508401994,0.007078162048224907,-0.09514544611289733,-0.018921002239447805,0.009302583947879682,0.02016402993297637,-0.015124462283306574,0.11433220275607836,-0.030622453598582886,-0.0707445295253403,0.021034199535304686,0.03569310665839579,0.001678122227573776,-0.009341879256170844,0.04841548462925892,0.020968159900531587,0.002163157339562894,0.0016000556190923594,-0.040881178351393876,0.033229996231932644,-0.04419763214836141,0.014810879301910412,-0.004739451640455279,0.041828917649207854,0.02547191072423808,0.03686921153688519,0.006846041986102701,-0.06173249447833047,-0.004321722875846428,-0.031385304635970945,-0.004193844570166805,-0.0009048089024498739,-0.0754826298724995,-0.01881312503957186,-0.018883592889872312,0.0028743336700236453,0.04019044589208575,-0.012761716264372867,0.0388014312894233,-0.0002801969110287194,0.029625421221009387,0.052140681649026216,0.04032230159705632,-0.008584450130950652,-0.01992043256262567,-0.011027889030654513,-0.06811385274490464,-0.014903643446002635,0.059755862745452026,-0.018876108406309135,-0.036866039740582376,0.003572597372720541,-0.06317122804874632,0.09227717801260492,-0.04201268270382196,0.018597650417891638,0.014041241724068527,-0.009461085984227546,0.005978128182352315,-0.13890452773493028,-0.007673394840800602,-0.011587189098387067,-0.003174574476480169,0.038734893823398425,-0.00807272597303041,-0.028703527241610988,0.004256049568182313,0.0013043681727822293,0.025854517397419834,-0.012358339354308119,0.013981018679298407,0.035602604328130706,-0.03735239464456023,-0.024194600426020528,0.0159745568603922,-0.051038421879638925,0.005672102684469807,0.007456257632379973,0.014885074767054533,0.052626209006086916,0.0032332054516216236,-0.0019973118952319106"
	var body = JSON.stringify({
		"sequence": prompt,
		"pitch": [],
		"duration": [], 
		"energy": [], 
#		"emAngry": [],
#		"emHappy": [],
#		"emSad":[],
#		"emSurprise":[], 
#		"editorStyles":[],
		"speaker_i": 0, 
		"pace": 1,
		"base_lang":"en",
		"base_emb": base_emb,
		"modelType": "xVAPitch",
		#"old_sequence": "",
		#"device":"cpu",
		#"useSR": false,
		#"useCleanup": false,
		"outfile": outfile,
		"pluginsContext": "[]",
		"vocoder": ""
	})
	http_request.request("http://127.0.0.1:8008/synthesize", headers, HTTPClient.METHOD_POST, body)
	
		
# Handle response from xvasynth server API to create audio file from text prompt
func _on_XVASynth_synthesize_request_completed(result, responseCode, headers, body):
	if responseCode != 200:
		print("There was an error with XVASynth's API's response, response code:" + str(responseCode))
		print(result)
		print(headers)
		print(body.get_string_from_utf8())
		return
	print("VASynth generated an audio file at: " + outfile)
	emit_signal("xvasynth_stored_voicefile", outfile)
	if !xvasynthplayer.playing: 
		stored_audio.append(outfile)
		XVASynth_play_audio(outfile)
	else:
		queue_XVASynth_audio(outfile)
	ok_to_synthesize = true
	if stored_prompts.size() > 0:
		process_XVASynth_prompt_queue()
	
	
# Queue prompt for synthesizing after current prompt completed
func process_XVASynth_prompt_queue():
	if ok_to_synthesize:
		ok_to_synthesize = false
		XVASynth_synthesize_queued_prompt(stored_prompts[0])
		stored_prompts.pop_front()


# Queue audio file for playing after current sound completed
func queue_XVASynth_audio(file_path):
	stored_audio.append(file_path)


# Play the generated audio
func XVASynth_play_audio(file_path):
	var file = FileAccess.open(file_path, FileAccess.READ)
	var data = file.get_buffer(file.get_length())
	xvasynthaudiostream.data = data
	file.close()
	xvasynthplayer.play()
	print("VASynth played audio file at: " + file_path)
	emit_signal("xvasynth_voice_sample_played")


# Receiver function when audio player finishes playing
func _on_xvasynth_player_finished():
	stored_audio.pop_front()
	if stored_audio.size() > 0:
		XVASynth_play_audio(stored_audio[0])
		
	
# Set model used for voice
func set_model(new_model_path : String):
	model_ready = false
	model_path = new_model_path
	# Find base_emb of model from model path
	var base_json_file_path = model_path+".json"
	var base_json_file = FileAccess.open(base_json_file_path, FileAccess.READ)
	var file_contents_as_text = base_json_file.get_as_text()
	var json_parser = JSON.new()
	var file_err = json_parser.parse(file_contents_as_text)
	var base_speaker_emb = json_parser.data["games"][0]["base_speaker_emb"]
	var base_emb_array = str(base_speaker_emb)
	var base_emb_left_stripped = base_emb_array.trim_prefix("[")
	base_emb = base_emb_left_stripped.trim_suffix("]")
	load_XVASynth_model()


# Get model used for voice
func get_model():
	return model_path


# Set pace to be used for voice
func set_pace(new_pace : float):
	pace = new_pace


func _exit_tree():
	if batfilepid != null:
		OS.kill(batfilepid)
